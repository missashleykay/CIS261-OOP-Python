6.1.1: Basic function call output.

print_pattern() prints 5 characters. Call print_pattern() twice to print 10 characters. Example output:
*****
*****

def print_pattern():
   print('*****')
   return

print_pattern()
print_pattern()

####################################

6.1.2: Basic function call.
Retype the following statements. Complete print_shape() to print the below shape.
def print_shape():
   # FIXME: complete function to print desired shape
   return
Example output:
***
***
***

def print_shape():
    for x in range(3):
        print("*"*3)


print_shape()

####################################

6.2.1: Function call with parameter: Converting measurements.

Define a function print_total_inches, with parameters num_feet and num_inches, that prints the total number of inches. Note: 
There are 12 inches in a foot. Ex: print_total_inches(5, 8) prints:
Total inches: 68

def print_total_inches (num_feet, num_inches):
    print('Total inches:', num_feet * 12 + num_inches)
    
print_total_inches(5, 8)

#####################################

6.2.2: Function call with parameter: Print tic-tac-toe board.

Complete the PrintTicTacToe function with parameters horiz_char and vert_char that prints a tic-tac-toe board with the characters 
as follows.
def print_tic_tac_toe(horiz_char, vert_char):
    # FIXME: complete function to print game board
    return
    
def print_tic_tac_toe(horiz_char, vert_char):
    #FIXME: complete function to print game board
    #horiz_char means '~'
    #vert_char means '!'
    print('x', vert_char, 'x', vert_char, 'x')
    print(horiz_char, horiz_char, horiz_char, horiz_char, horiz_char)
    print('x', vert_char, 'x', vert_char, 'x')
    print(horiz_char, horiz_char, horiz_char, horiz_char, horiz_char)
    print('x', vert_char, 'x', vert_char, 'x')
    return
print_tic_tac_toe('~', '!')

######################################

6.3.1: Function call in expression.

Assign max_sum with the max of (num_a, num_b) PLUS the max of (num_y, num_z). 
Use just one statement. Hint: Call find_max() twice in an expression.

def find_max(num_1, num_2):
   max_val = 0.0

   if (num_1 > num_2):  # if num1 is greater than num2,
      max_val = num_1   # then num1 is the maxVal.
   else:                # Otherwise,
      max_val = num_2   # num2 is the maxVal
   return max_val

num_a = 5.0
num_b = 10.0
num_y = 3.0
num_z = 7.0
max_sum = 0.0

max_sum = find_max(num_a,num_b)+find_max(num_y,num_z)

print('max_sum is:', max_sum)

#######################################

6.3.2: Function definition: Volume of a pyramid.

Define a function pyramid_volume with parameters base_length, base_width, and pyramid_height, 
that returns the volume of a pyramid with a rectangular base.

def pyramid_volume(base_length, base_width, pyramid_height):
    return (base_length * base_width) * pyramid_height / 3

print('Volume for 4.5, 2.1, 3.0 is:', pyramid_volume(4.5, 2.1, 3.0))

#####################################

6.6.1: Function with branch: Popcorn.

Define function print_popcorn_time() with parameter bag_ounces. If bag_ounces is less than 3, print "Too small". If greater than 10, 
print "Too large". Otherwise, compute and print 6 * bag_ounces followed by "seconds". End with a newline. 
Example output for bag_ounces = 7:    42 seconds

def print_popcorn_time(bag_ounces):

    if bag_ounces<3:

       print("Too small")

    elif bag_ounces>10:

       print("Too large")

    else :

       print (str(6*bag_ounces)+" seconds")

print_popcorn_time(7)

###################################
6.6.2: Function with loop: Shampoo.

Write a function shampoo_instructions() with parameter num_cycles. If num_cycles is less than 1, print "Too few.". 
If more than 4, print "Too many.". Else, print "N : Lather and rinse." num_cycles times, where N is the cycle number, 
followed by "Done.". Sample output for the given program:

def shampoo_instructions(num_cycles):

    if num_cycles < 1:

        print('Too few.')

    elif num_cycles > 4:
        print('Too many.')

    else:

        N = 1;

        for N in range(N, num_cycles+1):

            print(N , ": Lather and rinse.")

        print('Done.')

shampoo_instructions(2)

####################################

6.7.1: Function stubs: Statistics.

Define stubs for the functions get_user_num() and compute_avg(). Each stub should print "FIXME: Finish function_name()" 
followed by a newline, and should return -1. Each stub must also contain the function's parameters.

def get_user_num():
    print("FIXME: Finish get_user_num()")
    return -1

def compute_avg(num1, num2):
    print("FIXME: Finish compute_avg()")
    return -1

user_num1 = 0
user_num2 = 0
avg_result = 0

user_num1 = get_user_num()
user_num2 = get_user_num()
avg_result = compute_avg(user_num1, user_num2)

print('Avg:', avg_result)
